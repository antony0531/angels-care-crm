// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - integrates with Supabase Auth
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(AGENT)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  leads         Lead[]
  activities    LeadActivity[]
  notes         LeadNote[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  VIEWER
}

// Lead model - core entity for insurance CRM
model Lead {
  id            String      @id @default(uuid())
  email         String      @unique
  firstName     String
  lastName      String?
  phone         String?
  insuranceType InsuranceType
  source        LeadSource
  status        LeadStatus  @default(NEW)
  score         Int         @default(0)
  tags          String[]    
  metadata      Json?       // Store custom fields and tracking data
  
  // Location
  city          String?
  state         String?
  country       String?
  
  // Assignment
  assignedToId  String?
  assignedTo    User?       @relation(fields: [assignedToId], references: [id])
  
  // UTM and Tracking data
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  landingPage   String?
  sessionDuration Int?      // in seconds
  pagesViewed   Int?
  formCompletionTime Int?   // in seconds
  
  // Business data
  estimatedValue Float?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastContactAt DateTime?
  contactedAt   DateTime?
  convertedAt   DateTime?
  
  // Relations
  activities    LeadActivity[]
  notes         LeadNote[]
  submissions   FormSubmission[]
  
  @@index([email])
  @@index([status])
  @@index([assignedToId])
  @@index([createdAt])
  @@map("leads")
}

enum InsuranceType {
  MEDICARE_ADVANTAGE
  ACA_PLANS
  SUPPLEMENT
  PART_D
  LIFE_INSURANCE
  AUTO_INSURANCE
  HOME_INSURANCE
  OTHER
}

enum LeadSource {
  WEBSITE
  MANUAL
  IMPORT
  FACEBOOK
  GOOGLE_ADS
  LINKEDIN
  REFERRAL
  ORGANIC
  DIRECT
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED
  LOST
  UNQUALIFIED
}

// Lead Activity Tracking
model LeadActivity {
  id          String        @id @default(uuid())
  type        ActivityType
  description String
  metadata    Json?
  
  leadId      String
  lead        Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  
  createdAt   DateTime      @default(now())
  
  @@index([leadId])
  @@index([createdAt])
  @@map("lead_activities")
}

enum ActivityType {
  EMAIL_SENT
  EMAIL_OPENED
  CALL_MADE
  MEETING_SCHEDULED
  NOTE_ADDED
  STATUS_CHANGED
  ASSIGNED
  FORM_SUBMITTED
}

// Lead Notes
model LeadNote {
  id        String   @id @default(uuid())
  content   String   @db.Text
  
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([leadId])
  @@map("lead_notes")
}

// Analytics - Page views and sessions
model Analytics {
  id            String   @id @default(uuid())
  sessionId     String
  visitorId     String
  
  // Page data
  url           String
  path          String
  title         String?
  referrer      String?
  
  // User agent data
  userAgent     String?
  browser       String?
  device        String?
  os            String?
  
  // Location (from IP)
  country       String?
  city          String?
  
  // Metrics
  duration      Int?     // Time on page in seconds
  bounced       Boolean  @default(false)
  
  // UTM Parameters
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  utmTerm       String?
  utmContent    String?
  
  createdAt     DateTime @default(now())
  
  @@index([sessionId])
  @@index([visitorId])
  @@index([createdAt])
  @@index([path])
  @@map("analytics")
}

// Web Vitals - Performance metrics
model WebVitals {
  id            String   @id @default(uuid())
  sessionId     String
  url           String
  
  // Core Web Vitals
  lcp           Float?   // Largest Contentful Paint
  fid           Float?   // First Input Delay
  cls           Float?   // Cumulative Layout Shift
  fcp           Float?   // First Contentful Paint
  ttfb          Float?   // Time to First Byte
  inp           Float?   // Interaction to Next Paint
  
  createdAt     DateTime @default(now())
  
  @@index([sessionId])
  @@index([createdAt])
  @@map("web_vitals")
}

// Forms Configuration
model Form {
  id            String           @id @default(uuid())
  name          String
  description   String?
  fields        Json             // Form field configuration
  isActive      Boolean          @default(true)
  
  // Tracking
  submissions   FormSubmission[]
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("forms")
}

// Form Submissions
model FormSubmission {
  id            String   @id @default(uuid())
  formId        String
  form          Form     @relation(fields: [formId], references: [id])
  
  // Submitted data
  data          Json
  
  // Source tracking
  url           String?
  ip            String?
  userAgent     String?
  
  // Lead connection
  leadId        String?
  lead          Lead?    @relation(fields: [leadId], references: [id])
  
  createdAt     DateTime @default(now())
  
  @@index([formId])
  @@index([leadId])
  @@index([createdAt])
  @@map("form_submissions")
}

// Company/Organization Settings
model Company {
  id              String   @id @default(uuid())
  name            String
  website         String?
  logo            String?
  
  // Contact Info
  email           String?
  phone           String?
  address         String?
  
  // Business Hours
  businessHours   Json?
  timezone        String   @default("America/New_York")
  
  // Settings
  leadScoreRules  Json?    // Custom scoring rules
  autoAssignRules Json?    // Auto-assignment rules
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company")
}

// Integration Configurations
model Integration {
  id            String           @id @default(uuid())
  type          IntegrationType
  name          String
  config        Json             // Encrypted API keys and settings
  isActive      Boolean          @default(true)
  
  lastSyncAt    DateTime?
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@unique([type])
  @@map("integrations")
}

enum IntegrationType {
  GOOGLE_ANALYTICS
  WHATSAPP
  EMAIL_SERVICE
  WEBHOOK
  ZAPIER
  SLACK
}

// Webhook Events (for tracking)
model WebhookEvent {
  id            String   @id @default(uuid())
  type          String
  payload       Json
  status        WebhookStatus @default(PENDING)
  attempts      Int      @default(0)
  lastError     String?
  
  processedAt   DateTime?
  createdAt     DateTime @default(now())
  
  @@index([status])
  @@index([createdAt])
  @@map("webhook_events")
}

enum WebhookStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

// Webhook Retry Queue
model WebhookRetry {
  id           String   @id @default(uuid())
  type         String   // Type of webhook (facebook_lead, google_ads_lead, etc.)
  payload      Json     // Original webhook payload
  url          String?  // Optional URL for external webhooks
  attempts     Int      @default(0)
  maxAttempts  Int      @default(5)
  nextRetry    DateTime // When to attempt next retry
  lastError    String?  // Last error message
  status       WebhookRetryStatus @default(PENDING)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([status])
  @@index([nextRetry])
  @@index([type])
  @@map("webhook_retries")
}

enum WebhookRetryStatus {
  PENDING
  RETRYING
  SUCCESS
  FAILED
  DEAD_LETTER
}

// Dead Letter Queue for failed webhooks
model WebhookDeadLetterQueue {
  id              String   @id @default(uuid())
  originalId      String   // ID of the original webhook retry
  type            String   // Type of webhook
  payload         Json     // Original webhook payload
  url             String?  // Optional URL for external webhooks
  totalAttempts   Int      // Total number of attempts made
  lastError       String?  // Final error message
  firstFailedAt   DateTime // When the webhook first failed
  movedToDlqAt    DateTime // When moved to dead letter queue
  status          DeadLetterStatus @default(REQUIRES_MANUAL_REVIEW)
  resolvedAt      DateTime? // When manually resolved
  metadata        Json?    // Additional metadata for investigation
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([movedToDlqAt])
  @@map("webhook_dead_letter_queue")
}

enum DeadLetterStatus {
  REQUIRES_MANUAL_REVIEW
  INVESTIGATING
  MANUALLY_RESOLVED
  PERMANENTLY_FAILED
}

// Webhook Performance Monitoring
model WebhookPerformanceLog {
  id             String   @id @default(uuid())
  platform       String   // facebook, google, landing_page, generic
  endpoint       String   // API endpoint path
  method         String   // HTTP method (POST, GET)
  statusCode     Int      // HTTP response status code
  processingTime Int      // Processing time in milliseconds
  payloadSize    Int      // Request payload size in bytes
  errorMessage   String?  // Error message if failed
  userAgent      String?  // Client user agent
  ipAddress      String?  // Client IP address
  metadata       Json?    // Additional metadata
  
  timestamp      DateTime @default(now())
  
  @@index([platform])
  @@index([timestamp])
  @@index([statusCode])
  @@map("webhook_performance_logs")
}

// Webhook Alerts
model WebhookAlert {
  id           String      @id @default(uuid())
  type         AlertType
  severity     AlertSeverity
  platform     String?     // Optional platform filter
  message      String      // Alert message
  threshold    Float       // Alert threshold value
  currentValue Float       // Current metric value
  resolved     Boolean     @default(false)
  resolvedAt   DateTime?   // When alert was resolved
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@index([resolved])
  @@index([severity])
  @@index([platform])
  @@index([createdAt])
  @@map("webhook_alerts")
}

enum AlertType {
  ERROR_RATE
  PROCESSING_TIME
  VOLUME_SPIKE
  DEAD_LETTER_QUEUE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ===== CRM SETTINGS MODELS =====

// Lead Status Configuration
model LeadStatusConfig {
  id        String  @id @default(uuid())
  name      String
  color     String
  order     Int
  isDefault Boolean @default(false)
  isActive  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([order])
  @@map("lead_status_configs")
}

// Lead Source Configuration  
model LeadSourceConfig {
  id       String          @id @default(uuid())
  name     String
  type     LeadSourceType
  isActive Boolean         @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("lead_source_configs")
}

enum LeadSourceType {
  paid
  organic
  direct
  email
  referral
}

// Custom Field Configuration
model CustomFieldConfig {
  id         String              @id @default(uuid())
  name       String
  type       CustomFieldType
  isRequired Boolean             @default(false)
  options    String[]            // For select type fields
  order      Int?
  isActive   Boolean             @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("custom_field_configs")
}

enum CustomFieldType {
  text
  number
  select
  textarea
  date
}

// Lead Scoring Rules
model LeadScoringRule {
  id       String  @id @default(uuid())
  action   String  // e.g., "Email opened", "Form completed"
  points   Int
  isActive Boolean @default(true)
  order    Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("lead_scoring_rules")
}

// Assignment Rules
model AssignmentRule {
  id         String              @id @default(uuid())
  name       String
  conditions Json                // Array of condition objects
  assignTo   String
  priority   Int?                // Higher number = higher priority
  isActive   Boolean             @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("assignment_rules")
}

// CRM Settings - Single row for system-wide settings
model CrmSettings {
  id String @id @default("default") // Singleton pattern
  
  // Notification Settings
  emailNotifications    Boolean @default(true)
  smsNotifications      Boolean @default(false)
  webhookNotifications  Boolean @default(false)
  notificationEmail     String?
  smsNumber            String?
  dailyDigest          Boolean @default(false)
  instantAlerts        Boolean @default(true)
  
  // API & Webhook Settings
  webhookUrl           String?
  apiKey               String?
  enableWebhooks       Boolean @default(false)
  retryFailedCalls     Boolean @default(true)
  maxRetries           Int     @default(3)
  
  // Import/Export Settings
  importSource         ImportSourceType @default(csv)
  exportFormat         ExportFormatType @default(csv)
  autoExport           Boolean          @default(false)
  exportFrequency      ExportFrequency  @default(weekly)
  includeArchived      Boolean          @default(false)
  
  // Metadata for extensibility
  customSettings       Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("crm_settings")
}

enum ImportSourceType {
  csv
  excel
  json
}

enum ExportFormatType {
  csv
  excel
  json
  pdf
}

enum ExportFrequency {
  daily
  weekly
  monthly
}